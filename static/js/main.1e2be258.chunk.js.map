{"version":3,"sources":["Settings/Settings.module.css","Display/Display.module.css","CounterButtons/Button/Button.module.css","CounterButtons/CounterButtons.module.css","SettingsButtons/SettingsButtons.module.css","Display/Display.jsx","CounterButtons/Button/Button.jsx","CounterButtons/CounterButtons.jsx","Settings/SettingsField/SettingsField.jsx","Settings/Settings.jsx","SettingsButtons/SettingsButtons.jsx","redux/counter-reducer.js","App.jsx","serviceWorker.js","redux/store.js","index.jsx"],"names":["module","exports","Display","props","changeClass","displayValue","currentMaxCount","s","maxNumber","errorText","number","console","log","className","display","Button","button","disabled","isDisabled","onClick","func","btnName","CounterButtons","buttons","isNaN","inc","currentStartCount","reset","SettingsField","settingsItem","title","type","name","fieldName","onChange","onChangeValue","classField","value","currentValue","Settings","state","errorMaxCount","errorStartCount","e","newValue","currentTarget","setState","changeMaxValue","changeStartValue","alert","classMaxCount","this","error","default","classStartCount","settings","React","Component","SettingsButtons","set","initialState","counterReducer","action","setValues","JSON","stringify","setStartCount","setMaxCount","localStorage","setItem","savedValues","parse","getItem","App","setSavedValues","connect","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1e2be258.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__1bZUX\",\"settingsItem\":\"Settings_settingsItem__2JpEC\",\"default\":\"Settings_default__2h8eq\",\"error\":\"Settings_error__2EJ6_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__29Piw\",\"number\":\"Display_number__1vGk2\",\"maxNumber\":\"Display_maxNumber__1OaZX\",\"errorText\":\"Display_errorText__b2dK_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2DSvz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"CounterButtons_buttons__2ZJrF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"SettingsButtons_buttons__3AWQC\"};","import React from \"react\";\r\nimport s from \"./Display.module.css\";\r\n\r\nconst Display = (props) => {\r\n\r\n    let changeClass = () => {\r\n        switch (props.displayValue) {\r\n            case props.currentMaxCount:\r\n                return s.maxNumber;\r\n            case 'Incorrect value':\r\n                return s.errorText;\r\n            case 'Enter values and press \"set\"':\r\n                return '';\r\n            default:\r\n                return s.number\r\n        }\r\n\r\n    };\r\n    console.log(changeClass());\r\n    return (\r\n        <div className={s.display}>\r\n            <span className={changeClass()}>{props.displayValue}</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Display;","import React from \"react\";\r\nimport s from \"./Button.module.css\";\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button className={s.button}\r\n                disabled={props.isDisabled}\r\n                onClick={props.func}>{props.btnName}</button>\r\n    )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"./Button/Button\";\r\nimport s from \"./CounterButtons.module.css\"\r\n\r\nconst CounterButtons = (props) => {\r\n    return (\r\n        <div className={s.buttons}>\r\n            <Button btnName={'inc'}\r\n                    isDisabled={props.displayValue === props.currentMaxCount || isNaN(props.displayValue)}\r\n                    func={props.inc}/>\r\n            <Button btnName={'reset'}\r\n                    isDisabled={props.displayValue === props.currentStartCount || isNaN(props.displayValue)}\r\n                    func={props.reset}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CounterButtons;","import React from \"react\";\r\nimport s from \"../Settings.module.css\";\r\n\r\nconst SettingsField = (props) => {\r\n    return (\r\n        <div className={s.settingsItem}>\r\n            <span>{props.title}:</span>\r\n            <input type=\"number\"\r\n                   name={props.fieldName}\r\n                   onChange={props.onChangeValue}\r\n                   className={props.classField}\r\n                   value={props.currentValue} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SettingsField;","import React from \"react\";\r\nimport s from \"./Settings.module.css\";\r\nimport SettingsField from \"./SettingsField/SettingsField\";\r\n\r\nclass Settings extends React.Component {\r\n    state = {\r\n        errorMaxCount: false,\r\n        errorStartCount: false\r\n    };\r\n\r\n    onChangeValue = (e) => {\r\n        let newValue = +e.currentTarget.value;\r\n        switch (e.currentTarget.name) {\r\n            case 'maxValue':\r\n                if (newValue === this.props.currentStartCount) {\r\n                    this.setState({\r\n                        errorStartCount: true,\r\n                        errorMaxCount: true\r\n                    });\r\n                    this.props.changeMaxValue(newValue, true);\r\n                } else if (newValue < this.props.currentStartCount){\r\n                    this.setState({\r\n                        errorStartCount: true,\r\n                        errorMaxCount: true\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        errorStartCount: false,\r\n                        errorMaxCount: false});\r\n                    this.props.changeMaxValue(newValue, false);\r\n                }\r\n                break;\r\n            case 'startValue':\r\n                if (newValue < 0 || newValue > this.props.currentMaxCount){\r\n                    this.setState({errorStartCount: true});\r\n                    this.props.changeStartValue(this.props.currentStartCount, true);\r\n                } else if (newValue === this.props.currentMaxCount){\r\n                    this.setState({errorStartCount: true, errorMaxCount: true});\r\n                    this.props.changeStartValue(newValue, true);\r\n                } else {\r\n                    this.setState({errorStartCount: false, errorMaxCount: false});\r\n                    this.props.changeStartValue(newValue, false);\r\n                }\r\n                break;\r\n            default: alert ('Что-то пошло не так!')\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let classMaxCount = this.state.errorMaxCount ? s.error : s.default;\r\n        let classStartCount = this.state.errorStartCount ? s.error : s.default;\r\n\r\n        return(\r\n            <div className={s.settings}>\r\n                <SettingsField title={'max value'}\r\n                               fieldName={'maxValue'}\r\n                               onChangeValue={this.onChangeValue}\r\n                               classField={classMaxCount}\r\n                               currentValue={this.props.currentMaxCount}/>\r\n                <SettingsField title={'start value'}\r\n                               fieldName={'startValue'}\r\n                               onChangeValue={this.onChangeValue}\r\n                               classField={classStartCount}\r\n                               currentValue={this.props.currentStartCount}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from \"./SettingsButtons.module.css\";\r\nimport Button from \"../CounterButtons/Button/Button\";\r\n\r\nconst SettingsButtons = (props) => {\r\n    return(\r\n        <div className={s.buttons}>\r\n            <Button btnName={'set'}\r\n                    func={props.set}\r\n                    isDisabled={props.displayValue === 'Incorrect value'}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SettingsButtons;","const RESET = 'RESET';\r\nconst INC = 'INC';\r\nconst SET_VALUES = 'SET_VALUES';\r\nconst CHANGE_START_VALUE = 'CHANGE_START_VALUE';\r\nconst CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE';\r\nconst SET_SAVED_VALUES = 'SET_SAVED_VALUES';\r\n\r\nconst initialState = {\r\n    displayValue: 0,\r\n    currentStartCount: 0,\r\n    currentMaxCount: 5\r\n};\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case RESET:\r\n            return {\r\n                ...state,\r\n                displayValue: state.currentStartCount\r\n            };\r\n        case INC:\r\n            return {\r\n                ...state,\r\n                displayValue: state.displayValue + 1\r\n            };\r\n        case SET_VALUES:\r\n            let setValues = JSON.stringify({\r\n                setStartCount: state.currentStartCount,\r\n                setMaxCount: state.currentMaxCount\r\n            });\r\n            localStorage.setItem('setValues', setValues);\r\n            return {\r\n                ...state,\r\n                displayValue: state.currentStartCount\r\n            };\r\n        case CHANGE_START_VALUE:\r\n            if (action.error) {\r\n                return {\r\n                    ...state,\r\n                    currentStartCount: +action.newValue,\r\n                    displayValue: 'Incorrect value'\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentStartCount: +action.newValue,\r\n                    displayValue: 'Enter values and press \"set\"'\r\n                }\r\n            }\r\n        case CHANGE_MAX_VALUE:\r\n            if (action.newValue <= state.currentStartCount){\r\n                return {\r\n                    ...state,\r\n                    currentMaxCount: +action.newValue,\r\n                    displayValue: 'Incorrect value'\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentMaxCount: +action.newValue,\r\n                    displayValue: 'Enter values and press \"set\"'\r\n                }\r\n            }\r\n        case SET_SAVED_VALUES:\r\n            let savedValues = JSON.parse(localStorage.getItem('setValues'));\r\n            if (savedValues){\r\n                return {\r\n                    ...state,\r\n                    currentMaxCount: savedValues.setMaxCount,\r\n                    currentStartCount: savedValues.setStartCount,\r\n                    displayValue: savedValues.setStartCount\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const reset = () => ({type: RESET});\r\nexport const inc = () => ({type: INC});\r\nexport const setValues = () => ({type: SET_VALUES});\r\nexport const changeStartValue = (newValue, error) => ({type: CHANGE_START_VALUE, newValue, error});\r\nexport const changeMaxValue = (newValue) => ({type: CHANGE_MAX_VALUE, newValue});\r\nexport const setSavedValues = () => ({type: SET_SAVED_VALUES});\r\n\r\nexport default counterReducer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Display from \"./Display/Display\";\r\nimport CounterButtons from \"./CounterButtons/CounterButtons\";\r\nimport Settings from \"./Settings/Settings\";\r\nimport SettingsButtons from \"./SettingsButtons/SettingsButtons\";\r\nimport {connect} from \"react-redux\";\r\nimport {changeMaxValue, changeStartValue, inc, reset, setSavedValues, setValues} from \"./redux/counter-reducer\";\r\n\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.setSavedValues();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className='wrapApp'>\r\n                    <div className={'wrap'}>\r\n                        <Settings currentMaxCount={this.props.currentMaxCount}\r\n                                  currentStartCount={this.props.currentStartCount}\r\n                                  changeMaxValue={this.props.changeMaxValue}\r\n                                  changeStartValue={this.props.changeStartValue} />\r\n                        <SettingsButtons displayValue={this.props.displayValue}\r\n                                         set={this.props.setValues} />\r\n                    </div>\r\n                    <div className={'wrap'}>\r\n                        <Display displayValue={this.props.displayValue}\r\n                                 currentMaxCount={this.props.currentMaxCount} />\r\n                        <CounterButtons displayValue={this.props.displayValue}\r\n                                        currentMaxCount={this.props.currentMaxCount}\r\n                                        currentStartCount={this.props.currentStartCount}\r\n                                        inc={this.props.inc}\r\n                                        reset={this.props.reset}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        displayValue: state.displayValue,\r\n        currentMaxCount: state.currentMaxCount,\r\n        currentStartCount: state.currentStartCount\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n    {reset, inc, setValues, changeStartValue, changeMaxValue, setSavedValues})(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore} from \"redux\";\r\nimport counterReducer from \"./counter-reducer\";\r\n\r\nconst store = createStore(counterReducer);\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>, document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}