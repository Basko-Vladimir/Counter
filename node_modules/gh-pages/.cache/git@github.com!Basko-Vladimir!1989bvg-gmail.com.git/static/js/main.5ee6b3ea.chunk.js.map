{"version":3,"sources":["Settings/Settings.module.css","Display/Display.module.css","CounterButtons/Button/Button.module.css","CounterButtons/CounterButtons.module.css","SettingsButtons/SettingsButtons.module.css","Display/Display.jsx","CounterButtons/Button/Button.jsx","CounterButtons/CounterButtons.jsx","Settings/SettingsField/SettingsField.jsx","Settings/Settings.jsx","SettingsButtons/SettingsButtons.jsx","redux/counter-reducer.js","App.jsx","serviceWorker.js","redux/store.js","index.jsx"],"names":["module","exports","Display","props","changeClass","displayValue","currentMaxCount","s","maxNumber","errorText","number","console","log","className","display","Button","button","type","value","btnName","disabled","isDisabled","onClick","func","CounterButtons","buttons","incTitle","isNaN","inc","resetTitle","currentStartCount","reset","SettingsField","settingsItem","title","name","fieldName","onChange","onChangeValue","classField","currentValue","Settings","state","errorMaxCount","errorStartCount","e","newValue","currentTarget","setState","changeMaxValue","changeStartValue","alert","classMaxCount","this","error","default","classStartCount","settings","React","Component","SettingsButtons","setTitle","set","initialState","counterReducer","action","setValues","JSON","stringify","setStartCount","setMaxCount","localStorage","setItem","savedValues","parse","getItem","App","setSavedValues","connect","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5ee6b3ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__1bZUX\",\"settingsItem\":\"Settings_settingsItem__2JpEC\",\"default\":\"Settings_default__2h8eq\",\"error\":\"Settings_error__2EJ6_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__29Piw\",\"number\":\"Display_number__1vGk2\",\"maxNumber\":\"Display_maxNumber__1OaZX\",\"errorText\":\"Display_errorText__b2dK_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2DSvz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"CounterButtons_buttons__2ZJrF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"SettingsButtons_buttons__3AWQC\"};","import React from \"react\";\r\nimport s from \"./Display.module.css\";\r\n\r\nconst Display = (props) => {\r\n\r\n    let changeClass = () => {\r\n        switch (props.displayValue) {\r\n            case props.currentMaxCount:\r\n                return s.maxNumber;\r\n            case 'Incorrect value':\r\n                return s.errorText;\r\n            case 'Enter values and press \"set\"':\r\n                return '';\r\n            default:\r\n                return s.number\r\n        }\r\n\r\n    };\r\n    console.log(changeClass());\r\n    return (\r\n        <div className={s.display}>\r\n            <span className={changeClass()}>{props.displayValue}</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Display;","import React from \"react\";\r\nimport s from \"./Button.module.css\";\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <input className={s.button}\r\n               type=\"button\"\r\n               value={props.btnName}\r\n               disabled={props.isDisabled}\r\n               onClick={props.func}/>\r\n    )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport Button from \"./Button/Button\";\r\nimport s from \"./CounterButtons.module.css\"\r\n\r\nconst CounterButtons = (props) => {\r\n    return (\r\n        <div className={s.buttons}>\r\n            <Button btnName={props.incTitle}\r\n                    isDisabled={props.displayValue === props.currentMaxCount || isNaN(props.displayValue)}\r\n                    func={props.inc}/>\r\n            <Button btnName={props.resetTitle}\r\n                    isDisabled={props.displayValue === props.currentStartCount || isNaN(props.displayValue)}\r\n                    func={props.reset}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CounterButtons;","import React from \"react\";\r\nimport s from \"../Settings.module.css\";\r\n\r\nconst SettingsField = (props) => {\r\n    return (\r\n        <div className={s.settingsItem}>\r\n            <span>{props.title}:</span>\r\n            <input type=\"number\"\r\n                   name={props.fieldName}\r\n                   onChange={props.onChangeValue}\r\n                   className={props.classField}\r\n                   value={props.currentValue} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SettingsField;","import React from \"react\";\r\nimport s from \"./Settings.module.css\";\r\nimport SettingsField from \"./SettingsField/SettingsField\";\r\n\r\nclass Settings extends React.Component {\r\n    state = {\r\n        errorMaxCount: false,\r\n        errorStartCount: false\r\n    };\r\n\r\n    onChangeValue = (e) => {\r\n        let newValue = +e.currentTarget.value;\r\n        switch (e.currentTarget.name) {\r\n            case 'maxValue':\r\n                if (newValue === this.props.currentStartCount) {\r\n                    this.setState({\r\n                        errorStartCount: true,\r\n                        errorMaxCount: true\r\n                    });\r\n                    this.props.changeMaxValue(newValue, true);\r\n                } else if (newValue < this.props.currentStartCount){\r\n                    this.setState({\r\n                        errorStartCount: true,\r\n                        errorMaxCount: true\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        errorStartCount: false,\r\n                        errorMaxCount: false});\r\n                    this.props.changeMaxValue(newValue, false);\r\n                }\r\n                break;\r\n            case 'startValue':\r\n                if (newValue < 0 || newValue > this.props.currentMaxCount){\r\n                    this.setState({errorStartCount: true});\r\n                    this.props.changeStartValue(this.props.currentStartCount, true);\r\n                } else if (newValue === this.props.currentMaxCount){\r\n                    this.setState({errorStartCount: true, errorMaxCount: true});\r\n                    this.props.changeStartValue(newValue, true);\r\n                } else {\r\n                    this.setState({errorStartCount: false, errorMaxCount: false});\r\n                    this.props.changeStartValue(newValue, false);\r\n                }\r\n                break;\r\n            default: alert ('Что-то пошло не так!')\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let classMaxCount = this.state.errorMaxCount ? s.error : s.default;\r\n        let classStartCount = this.state.errorStartCount ? s.error : s.default;\r\n\r\n        return(\r\n            <div className={s.settings}>\r\n                <SettingsField title={'max value'}\r\n                               fieldName={'maxValue'}\r\n                               onChangeValue={this.onChangeValue}\r\n                               classField={classMaxCount}\r\n                               currentValue={this.props.currentMaxCount}/>\r\n                <SettingsField title={'start value'}\r\n                               fieldName={'startValue'}\r\n                               onChangeValue={this.onChangeValue}\r\n                               classField={classStartCount}\r\n                               currentValue={this.props.currentStartCount}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from \"./SettingsButtons.module.css\";\r\nimport Button from \"../CounterButtons/Button/Button\";\r\n\r\nconst SettingsButtons = (props) => {\r\n    return(\r\n        <div className={s.buttons}>\r\n            <Button btnName={props.setTitle}\r\n                    func={props.set}\r\n                    isDisabled={props.displayValue === 'Incorrect value'}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SettingsButtons;","const RESET = 'RESET';\r\nconst INC = 'INC';\r\nconst SET_VALUES = 'SET_VALUES';\r\nconst CHANGE_START_VALUE = 'CHANGE_START_VALUE';\r\nconst CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE';\r\nconst SET_SAVED_VALUES = 'SET_SAVED_VALUES';\r\n\r\nconst initialState = {\r\n    inc: {title: 'inc'},\r\n    reset: {title: 'reset'},\r\n    set: {title: 'set'},\r\n    displayValue: 0,\r\n    currentStartCount: 0,\r\n    currentMaxCount: 5\r\n};\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case RESET:\r\n            return {\r\n                ...state,\r\n                displayValue: state.currentStartCount\r\n            };\r\n        case INC:\r\n            return {\r\n                ...state,\r\n                displayValue: state.displayValue + 1\r\n            };\r\n        case SET_VALUES:\r\n            let setValues = JSON.stringify({\r\n                setStartCount: state.currentStartCount,\r\n                setMaxCount: state.currentMaxCount\r\n            });\r\n            localStorage.setItem('setValues', setValues);\r\n            return {\r\n                ...state,\r\n                displayValue: state.currentStartCount\r\n            };\r\n        case CHANGE_START_VALUE:\r\n            if (action.error) {\r\n                return {\r\n                    ...state,\r\n                    currentStartCount: +action.newValue,\r\n                    displayValue: 'Incorrect value'\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentStartCount: +action.newValue,\r\n                    displayValue: 'Enter values and press \"set\"'\r\n                }\r\n            }\r\n        case CHANGE_MAX_VALUE:\r\n            if (action.newValue <= state.currentStartCount){\r\n                return {\r\n                    ...state,\r\n                    currentMaxCount: +action.newValue,\r\n                    displayValue: 'Incorrect value'\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentMaxCount: +action.newValue,\r\n                    displayValue: 'Enter values and press \"set\"'\r\n                }\r\n            }\r\n        case SET_SAVED_VALUES:\r\n            let savedValues = JSON.parse(localStorage.getItem('setValues'));\r\n            if (savedValues){\r\n                return {\r\n                    ...state,\r\n                    currentMaxCount: savedValues.setMaxCount,\r\n                    currentStartCount: savedValues.setStartCount,\r\n                    displayValue: savedValues.setStartCount\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const reset = () => ({type: RESET});\r\nexport const inc = () => ({type: INC});\r\nexport const setValues = () => ({type: SET_VALUES});\r\nexport const changeStartValue = (newValue, error) => ({type: CHANGE_START_VALUE, newValue, error});\r\nexport const changeMaxValue = (newValue) => ({type: CHANGE_MAX_VALUE, newValue});\r\nexport const setSavedValues = () => ({type: SET_SAVED_VALUES});\r\n\r\nexport default counterReducer;\r\n","import React from 'react';\nimport './App.css';\nimport Display from \"./Display/Display\";\nimport CounterButtons from \"./CounterButtons/CounterButtons\";\nimport Settings from \"./Settings/Settings\";\nimport SettingsButtons from \"./SettingsButtons/SettingsButtons\";\nimport {connect} from \"react-redux\";\nimport {changeMaxValue, changeStartValue, inc, reset, setSavedValues, setValues} from \"./redux/counter-reducer\";\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.setSavedValues();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className='wrapApp'>\n                    <div className={'wrap'}>\n                        <Settings currentMaxCount={this.props.currentMaxCount}\n                                  currentStartCount={this.props.currentStartCount}\n                                  changeMaxValue={this.props.changeMaxValue}\n                                  changeStartValue={this.props.changeStartValue} />\n                        <SettingsButtons setTitle={this.props.setTitle}\n                                         displayValue={this.props.displayValue}\n                                         set={this.props.setValues} />\n                    </div>\n                    <div className={'wrap'}>\n                        <Display displayValue={this.props.displayValue}\n                                 currentMaxCount={this.props.currentMaxCount} />\n                        <CounterButtons displayValue={this.props.displayValue}\n                                        currentMaxCount={this.props.currentMaxCount}\n                                        currentStartCount={this.props.currentStartCount}\n                                        resetTitle={this.props.resetTitle}\n                                        incTitle={this.props.incTitle}\n                                        inc={this.props.inc}\n                                        reset={this.props.reset}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        displayValue: state.displayValue,\n        currentMaxCount: state.currentMaxCount,\n        currentStartCount: state.currentStartCount,\n        incTitle: state.inc.title,\n        resetTitle: state.reset.title,\n        setTitle: state.set.title\n    }\n};\n\nexport default connect(mapStateToProps,\n    {reset, inc, setValues, changeStartValue, changeMaxValue, setSavedValues})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore} from \"redux\";\r\nimport counterReducer from \"./counter-reducer\";\r\n\r\nconst store = createStore(counterReducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}